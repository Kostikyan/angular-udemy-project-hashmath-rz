{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nexport let AuthService = class AuthService {\n  constructor(afAuth, toastr, router) {\n    this.afAuth = afAuth;\n    this.toastr = toastr;\n    this.router = router;\n  }\n  login(email, password) {\n    this.afAuth.signInWithEmailAndPassword(email, password).then(logRef => {\n      this.toastr.success('Logged in successfully');\n    }).catch(err => {\n      this.toastr.error(err);\n    });\n  }\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);","map":{"version":3,"names":["Injectable","AuthService","constructor","afAuth","toastr","router","login","email","password","signInWithEmailAndPassword","then","logRef","success","catch","err","error","__decorate","providedIn"],"sources":["/Users/mno/Desktop/ang-blog-dashboard/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {AngularFireAuth} from \"@angular/fire/compat/auth\";\nimport {ToastrService} from \"ngx-toastr\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private afAuth: AngularFireAuth, private toastr: ToastrService,\n              private router: RouterS\n              ) { }\n\n  login(email: string, password: string) {\n    this.afAuth.signInWithEmailAndPassword(email, password).then(logRef => {\n      this.toastr.success('Logged in successfully')\n    }).catch(err => {\n      this.toastr.error(err);\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAOnC,WAAMC,WAAW,GAAjB,MAAMA,WAAW;EAEtBC,YAAoBC,MAAuB,EAAUC,MAAqB,EACtDC,MAAe;IADf,KAAAF,MAAM,GAANA,MAAM;IAA2B,KAAAC,MAAM,GAANA,MAAM;IACvC,KAAAC,MAAM,GAANA,MAAM;EACV;EAEhBC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,IAAI,CAACL,MAAM,CAACM,0BAA0B,CAACF,KAAK,EAAEC,QAAQ,CAAC,CAACE,IAAI,CAACC,MAAM,IAAG;MACpE,IAAI,CAACP,MAAM,CAACQ,OAAO,CAAC,wBAAwB,CAAC;IAC/C,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAG;MACb,IAAI,CAACV,MAAM,CAACW,KAAK,CAACD,GAAG,CAAC;IACxB,CAAC,CAAC;EACJ;CAED;AAdYb,WAAW,GAAAe,UAAA,EAHvBhB,UAAU,CAAC;EACViB,UAAU,EAAE;CACb,CAAC,C,EACWhB,WAAW,CAcvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}