{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nexport let AuthGuard = class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isLoggedInGuard) {\n      console.log('Access Granted...');\n      return true;\n    } else {\n      console.log('Access Denied...');\n      return false;\n    }\n  }\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);","map":{"version":3,"names":["Injectable","AuthGuard","constructor","authService","router","canActivate","route","state","isLoggedInGuard","console","log","__decorate","providedIn"],"sources":["/Users/mno/Desktop/ang-blog-dashboard/src/app/services/auth.guard.ts"],"sourcesContent":["import {ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs\";\nimport {AuthService} from \"./auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: ) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if (this.authService.isLoggedInGuard) {\n      console.log('Access Granted...')\n      return true;\n    } else {\n      console.log('Access Denied...')\n      return false\n    }\n  }\n}\n"],"mappings":";AACA,SAAQA,UAAU,QAAO,eAAe;AAOjC,WAAMC,SAAS,GAAf,MAAMA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAO;IAAzC,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAC5D;EAEAC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;MACpCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,OAAO,IAAI;KACZ,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B,OAAO,KAAK;;EAEhB;CACD;AAjBYT,SAAS,GAAAU,UAAA,EAHrBX,UAAU,CAAC;EACVY,UAAU,EAAE;CACb,CAAC,C,EACWX,SAAS,CAiBrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}